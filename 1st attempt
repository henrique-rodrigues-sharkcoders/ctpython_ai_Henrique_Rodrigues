import cv2
import numpy as np
import mediapipe as mp

mp_hands = mp.solutions.hands
mp_draw = mp.solutions.drawing_utils

cap = cv2.VideoCapture(0)

# Verificar se a webcam está funcionando
ret, frame = cap.read()
if not ret:
    print("Erro ao acessar a webcam.")
    cap.release()
    exit()

altura, largura, _ = frame.shape
canvas = np.ones((altura, largura, 3), dtype=np.uint8) * 255

# Cores padrão
colors = [(0, 0, 0), (255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (255, 165, 0)]
brush_color_index = 0
drawing_enabled = True

with mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7) as hands:
    prev_point = None

    while True:
        ret, frame = cap.read()
        if not ret:
            break
        frame = cv2.flip(frame, 1)
        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        results = hands.process(rgb)

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

                h, w, _ = frame.shape
                x8 = int(hand_landmarks.landmark[8].x * w)
                y8 = int(hand_landmarks.landmark[8].y * h)
                cv2.circle(frame, (x8, y8), 10, colors[brush_color_index], cv2.FILLED)
                cv2.putText(frame, f'8: ({x8},{y8})', (x8+10, y8), cv2.FONT_HERSHEY_SIMPLEX, 0.6, colors[brush_color_index], 2)

                if drawing_enabled:
                    if prev_point is not None:
                        cv2.line(canvas, prev_point, (x8, y8), colors[brush_color_index], 3)
                    prev_point = (x8, y8)
        else:
            prev_point = None

        cv2.imshow("Landmarks", frame)
        cv2.imshow("Desenho", canvas)

        key = cv2.waitKey(1) & 0xFF
        if key == 27:
            break
        elif key == ord('c'):
            canvas = np.ones((altura, largura, 3), dtype=np.uint8) * 255
        elif key == ord('b'):
            drawing_enabled = not drawing_enabled
        elif key == ord('r'):
            brush_color_index = (brush_color_index + 1) % len(colors)

cap.release()
cv2.destroyAllWindows()
